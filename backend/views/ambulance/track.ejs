<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Track Ambulance</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://apis.mappls.com/advancedmaps/api/0185171f08b0a500267c576378babfa8/map_sdk?v=3.0&layer=vector"></script>
    <link rel="stylesheet" href="https://apis.mappls.com/advancedmaps/api/8.0/advancedmaps.css" />
    <style>
        #map {
            height: 500px;
            width: 100%;
        }
    </style>
</head>

<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-12">
                <h1>Track Ambulance ID: <%= ambulanceId %></h1>
            </div>
        </div>

        <div class="row">
            <!-- Map Section (Full-width) -->
            <div class="col-12 mb-4">
                <div id="map"></div>
            </div>
        </div>

        <div class="row">
            <!-- Ambulance Details Section -->
            <div class="col-md-6 offset-md-3">
                <div class="card">
                    <div class="card-header bg-danger text-white">
                        Ambulance Details
                    </div>
                    <div class="card-body">
                        <p><strong>ETA:</strong> 15 mins</p>
                        <p><strong>Driver:</strong> John Doe</p>
                        <p><strong>Vehicle:</strong> AB1234</p>
                        <p><strong>Hospital:</strong> City Hospital</p>
                    </div>
                    <div class="card-footer">
                        <a href="tel:+1234567890" class="btn btn-danger btn-block">Contact Driver</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Route Info -->
        <div class="row mt-4">
            <div class="col-12">
                <div id="route-info"></div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const ambulanceId = '<%= ambulanceId %>';
        let map, marker;
        let userLat, userLng; // User's location coordinates
        let activeRoute = null; // Track the active route polyline

        function initMap() {
            // Initialize the Mappls map
            map = new mappls.Map('map', {
                center: [77.2090, 28.6139], // Initial center (New Delhi)
                zoom: 12,
                styles: 'https://api.mappls.com/styles/v1/mappls/standard/tiles/{z}/{x}/{y}?access_token=0185171f08b0a500267c576378babfa8'
            });

            // Get user's current location
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    userLat = position.coords.latitude;
                    userLng = position.coords.longitude;

                    // Update map's center to user's current location
                    map.setCenter({ lat: userLat, lng: userLng });

                    // Add marker at user's current location
                    new mappls.Marker({
                        map: map,
                        position: { lat: userLat, lng: userLng },
                        title: "Your Location"
                    });
                }, function () {
                    console.error("Geolocation failed or is not supported by this browser.");
                });
            } else {
                console.error("Geolocation is not supported by this browser.");
            }

            // Create a marker for the ambulance
            marker = new mappls.Marker({
                position: [77.2090, 28.6139], // Initial position (will be updated)
                map: map
            });
        }

        // Function to load the route between user's location and ambulance's location
        function loadRoute(startLat, startLng, endLat, endLng) {
            const routeUrl = `/route?startLat=${startLat}&startLng=${startLng}&endLat=${endLat}&endLng=${endLng}`;
            fetch(routeUrl)
                .then(response => response.json())
                .then(data => {
                    console.log('Route Data:', data); // Debug log to check route data
                    document.getElementById('route-info').innerText = JSON.stringify(data); // Display route data on the page

                    if (data.route && data.route.geometry) {
                        const routeGeometry = data.route.geometry;

                        // Decode the polyline
                        const decodedPath = decodePolyline(routeGeometry);

                        // Clear previous routes from the map
                        if (activeRoute) {
                            activeRoute.setMap(null);
                        }

                        // Draw the polyline on the map
                        activeRoute = new mappls.Polyline({
                            path: decodedPath,
                            map: map,
                            strokeColor: '#00f',
                            strokeOpacity: 1.0,
                            strokeWeight: 4
                        });
                    } else {
                        console.error('No route found.');
                        alert('No route found. Please try again later.');
                    }
                })
                .catch(error => {
                    console.error('Error fetching route:', error);
                    alert('An error occurred while fetching the route.');
                });
        }

        // Decode the polyline (OSRM format)
        function decodePolyline(encoded) {
            let points = [];
            let index = 0, len = encoded.length;
            let lat = 0, lng = 0;

            while (index < len) {
                let b, shift = 0, result = 0;
                do {
                    b = encoded.charCodeAt(index++) - 63;
                    result |= (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);
                let dlat = ((result & 1) ? ~(result >> 1) : (result >> 1));
                lat += dlat;

                shift = 0;
                result = 0;
                do {
                    b = encoded.charCodeAt(index++) - 63;
                    result |= (b & 0x1f) << shift;
                    shift += 5;
                } while (b >= 0x20);
                let dlng = ((result & 1) ? ~(result >> 1) : (result >> 1));
                lng += dlng;

                points.push({ lat: lat / 1E5, lng: lng / 1E5 });
            }

            return points;
        }

        // Update ambulance location and load the route
        socket.on('riderLocationUpdate', function(data) {
            if (data.ambulanceId === ambulanceId) {
                const newLatLng = new mappls.LatLng(data.lat, data.lng);
                marker.setPosition(newLatLng);
                map.panTo(newLatLng);

                // Load the route from user's location to the ambulance's new location
                loadRoute(userLat, userLng, data.lat, data.lng);
            }
        });

        initMap();
    </script>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>
